// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("AZURE_POSTGRES_PRISMA_URL")
    directUrl = env("AZURE_POSTGRES_URL_NON_POOLING")
}

enum UserRole {
    SUPER_ADMIN
    APPLICANT
    ADMIN
}

enum OrganizationType {
    BANK
    INSURANCE
    REAL_ESTATE
    GOVERNMENT
    OTHER
}

enum IdentityType {
    PASSPORT
    NATIONAL_ID
}

model Organization {
    id           String           @id @default(cuid())
    abbreviation String           @unique @db.VarChar(10)
    name         String
    image        String?
    orgType      OrganizationType @default(BANK)
    users        User[]
    createdAt    DateTime         @default(now())

    @@map(name: "organizations")
}

model User {
    id                     String                   @id @default(cuid())
    name                   String
    surname                String
    email                  String                   @unique
    password               String?
    emailVerified          DateTime?
    image                  String?
    organizationId         String?
    createdAt              DateTime                 @default(now())
    active                 Boolean                  @default(false)
    identificationNumber   String?
    identityType           IdentityType?
    application            Application[]
    role                   UserRole                 @default(APPLICANT)
    accounts               Account[]
    VerificationToken      VerificationToken[]
    organization           Organization?            @relation(fields: [organizationId], references: [id])
    PasswordResetToken     PasswordResetToken[]
    AccountActivationToken AccountActivationToken[]

    @@map(name: "users")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map(name: "accounts")
}

model Property {
    id                   String        @id @default(cuid())
    address              String
    currency             String
    financingInstitution String?
    other                String?
    type                 String
    value                Float
    application          Application[]
    createdAt            DateTime      @default(now())

    @@map(name: "properties")
}

enum Status {
    PENDING
    APPROVED
    REJECTED
}

model Application {
    id          String   @id @default(uuid())
    propertyId  String
    applicant   User     @relation(fields: [applicantId], references: [id])
    applicantId String
    createdAt   DateTime @default(now())
    status      Status   @default(PENDING)
    property    Property @relation(fields: [propertyId], references: [id])

    @@map(name: "applications")
}

model VerificationToken {
    id        String   @id @default(cuid())
    token     String   @unique
    expiresAt DateTime
    userId    String
    user      User     @relation(fields: [userId], references: [id])

    @@unique([userId, token])
    @@map(name: "verification_tokens")
}

model AccountActivationToken {
    id        String   @id @default(cuid())
    token     String   @unique
    expiresAt DateTime
    userId    String
    user      User     @relation(fields: [userId], references: [id])

    @@unique([userId, token])
    @@map(name: "account_activation_tokens")
}

model PasswordResetToken {
    id        String   @id @default(cuid())
    token     String   @unique
    expiresAt DateTime
    userId    String
    user      User     @relation(fields: [userId], references: [id])

    @@unique([userId, token])
    @@map(name: "password_reset_tokens")
}
